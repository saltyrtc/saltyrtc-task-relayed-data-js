{"version":3,"file":"saltyrtc-task-relayed-data.es5.min.js","sources":["../src/task.ts"],"sourcesContent":["/**\n * Copyright (C) 2018-2022 Threema GmbH\n *\n * This software may be modified and distributed under the terms\n * of the MIT license.  See the `LICENSE.md` file for details.\n */\n\n/// <reference types=\"@saltyrtc/client\" />\n\n/**\n * Relayed Data Task.\n */\nexport class RelayedDataTask implements saltyrtc.tasks.relayed_data.RelayedDataTask {\n\n    // Constants\n    private static PROTOCOL_NAME = 'v0.relayed-data.tasks.saltyrtc.org';\n    private static TYPE_DATA = 'data';\n    private static KEY_PAYLOAD = 'p';\n    private static EVENT_DATA = 'data';\n\n    // Debugging enabled?\n    private debugging = false;\n\n    // Initialization state\n    private initialized = false;\n\n    // Signaling\n    private signaling: saltyrtc.Signaling;\n\n    // Events\n    private eventRegistry: saltyrtc.EventRegistry = new saltyrtcClient.EventRegistry();\n\n    // Log tag\n    private get logTag(): string {\n        if (this.signaling === null || this.signaling === undefined) {\n            return '[SaltyRTC.RelayedData]';\n        }\n        return '[SaltyRTC.RelayedData.' + this.signaling.role + ']';\n    }\n\n    /**\n     * Enable or disable debug logs.\n     */\n    public setDebug(enabled: boolean): void {\n        this.debugging = enabled;\n    }\n\n    /**\n     * Log to console.debug if debug mode is enabled.\n     */\n    private debug(...args: any[]) {\n        if (this.debugging) {\n            // tslint:disable:no-console\n            console.debug(this.logTag, ...args);\n        }\n    }\n\n    /**\n     * Create a new task instance.\n     */\n    constructor(debug: boolean = false) {\n        this.debugging = debug;\n    }\n\n    /**\n     * Send an end-to-end encrypted message through the WebSocket.\n     */\n    public sendMessage(data: any): void {\n        this.signaling.sendTaskMessage({\n            type: RelayedDataTask.TYPE_DATA,\n            p: data,\n        });\n    }\n\n    /**\n     * Initialize the task with the task data from the peer.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public init(signaling: saltyrtc.Signaling, data: object): void {\n        this.debug('init');\n        this.signaling = signaling;\n        this.initialized = true;\n    }\n\n    /**\n     * Used by the signaling class to notify task that the peer handshake is over.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public onPeerHandshakeDone(): void {\n        this.debug('onPeerHandshakeDone');\n    }\n\n    /**\n     * Handle incoming task messages.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public onTaskMessage(message: saltyrtc.messages.TaskMessage): void {\n        this.debug('New task message arrived: ' + message.type);\n        switch (message.type) {\n            case RelayedDataTask.TYPE_DATA:\n                if (this.validateData(message) !== true) {\n                    return;\n                }\n                this.emit({type: RelayedDataTask.EVENT_DATA, data: message[RelayedDataTask.KEY_PAYLOAD]});\n                break;\n            default:\n                console.error(this.logTag, 'Received message with invalid type:', message.type);\n        }\n    }\n\n    /**\n     * Send a signaling message *through the data channel*.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     *\n     * @param payload Non-encrypted message\n     * @throws SignalingError always\n     */\n    public sendSignalingMessage(payload: Uint8Array) {\n        throw new saltyrtcClient.SignalingError(\n            saltyrtcClient.CloseCode.ProtocolError,\n            'sendSignalingMessage called even though task does not implement handover',\n        );\n    }\n\n    /**\n     * Return the task protocol name.\n     */\n    public getName(): string {\n        return RelayedDataTask.PROTOCOL_NAME;\n    }\n\n    /**\n     * Return the list of supported message types.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public getSupportedMessageTypes(): string[] {\n        // Only return data message. The 'close' and 'application' messages are already handled\n        // by the `@saltyrtc/client` library.\n        return [RelayedDataTask.TYPE_DATA];\n    }\n\n    /**\n     * Return the task data used for negotiation in the `auth` message.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public getData(): object {\n        return {};\n    }\n\n    /**\n     * This method can be called by the user to close the connection.\n     *\n     * @param reason The close code.\n     */\n    public close(reason: number): void {\n        this.debug('Closing connection:', saltyrtcClient.explainCloseCode(reason));\n    }\n\n    /**\n     * Attach an event handler to the specified event(s).\n     *\n     * Note: The same event handler object cannot be registered multiple\n     * times. It will only run once.\n     */\n    public on(event: string | string[], handler: saltyrtc.SaltyRTCEventHandler): void {\n        this.eventRegistry.register(event, handler);\n    }\n\n    /**\n     * Attach a one-time event handler to the specified event(s).\n     *\n     * Note: If the same handler was already registered previously as a regular\n     * event handler, it will be completely removed after running once.\n     */\n    public once(event: string | string[], handler: saltyrtc.SaltyRTCEventHandler): void {\n        const onceHandler: saltyrtc.SaltyRTCEventHandler = (ev: saltyrtc.SaltyRTCEvent) => {\n            try {\n                handler(ev);\n            } catch (e) {\n                // Handle exceptions\n                this.off(ev.type, onceHandler);\n                throw e;\n            }\n            this.off(ev.type, onceHandler);\n        };\n        this.eventRegistry.register(event, onceHandler);\n    }\n\n    /**\n     * Remove an event handler from the specified event(s).\n     *\n     * If no handler is specified, remove all handlers for the specified\n     * event(s).\n     *\n     * If no event name is specified, all event handlers will be cleared.\n     */\n    public off(event?: string | string[], handler?: saltyrtc.SaltyRTCEventHandler): void {\n        if (event === undefined) {\n            this.eventRegistry.unregisterAll();\n        } else {\n            this.eventRegistry.unregister(event, handler);\n        }\n    }\n\n    /**\n     * Emit an event.\n     */\n    private emit(event: saltyrtc.SaltyRTCEvent) {\n        this.debug('New event:', event.type);\n        const handlers = this.eventRegistry.get(event.type);\n        for (const handler of handlers) {\n            try {\n                this.callHandler(handler, event);\n            } catch (e) {\n                console.error(this.logTag, 'Unhandled exception in', event.type, 'handler:', e);\n            }\n        }\n    }\n\n    /**\n     * Call a handler with the specified event.\n     *\n     * If the handler returns `false`, unregister it.\n     */\n    private callHandler(handler: saltyrtc.SaltyRTCEventHandler, event: saltyrtc.SaltyRTCEvent) {\n        const response = handler(event);\n        if (response === false) {\n            this.eventRegistry.unregister(event.type, handler);\n        }\n    }\n\n    /**\n     * Validate data messages.\n     */\n    private validateData(message: saltyrtc.messages.TaskMessage): boolean {\n        if (message[RelayedDataTask.KEY_PAYLOAD] === undefined) {\n            console.warn(this.logTag, 'Data message does not contain payload');\n            return false;\n        }\n        return true;\n    }\n\n}\n"],"names":["RelayedDataTask","constructor","debug","this","saltyrtcClient","EventRegistry","debugging","logTag","signaling","undefined","role","setDebug","enabled","args","console","sendMessage","data","sendTaskMessage","type","TYPE_DATA","p","init","initialized","onPeerHandshakeDone","onTaskMessage","message","validateData","emit","EVENT_DATA","KEY_PAYLOAD","error","sendSignalingMessage","payload","SignalingError","CloseCode","ProtocolError","getName","PROTOCOL_NAME","getSupportedMessageTypes","getData","close","reason","explainCloseCode","on","event","handler","eventRegistry","register","once","onceHandler","ev","e","off","unregisterAll","unregister","handlers","get","callHandler","warn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAYaA,EAgDTC,YAAYC,GAAiB,GAvCrBC,gBAAY,EAGZA,kBAAc,EAMdA,mBAAwC,IAAIC,eAAeC,cA+B/DF,KAAKG,UAAYJ,EA5BTK,aACR,OAAuB,OAAnBJ,KAAKK,gBAAyCC,IAAnBN,KAAKK,UACzB,yBAEJ,yBAA2BL,KAAKK,UAAUE,KAAO,IAMrDC,SAASC,GACZT,KAAKG,UAAYM,EAMbV,SAASW,GACTV,KAAKG,WAELQ,QAAQZ,MAAMC,KAAKI,UAAWM,GAc/BE,YAAYC,GACfb,KAAKK,UAAUS,gBAAgB,CAC3BC,KAAMlB,EAAgBmB,UACtBC,EAAGJ,IASJK,KAAKb,EAA+BQ,GACvCb,KAAKD,MAAM,QACXC,KAAKK,UAAYA,EACjBL,KAAKmB,aAAc,EAQhBC,sBACHpB,KAAKD,MAAM,uBAQRsB,cAAcC,GAEjB,GADAtB,KAAKD,MAAM,6BAA+BuB,EAAQP,MAC1CO,EAAQP,OACPlB,EAAgBmB,UAArB,CACI,IAAmC,IAA/BhB,KAAKuB,aAAaD,GAClB,OAEJtB,KAAKwB,KAAK,CAACT,KAAMlB,EAAgB4B,WAAYZ,KAAMS,EAAQzB,EAAgB6B,oBAG3Ef,QAAQgB,MAAM3B,KAAKI,OAAQ,sCAAuCkB,EAAQP,MAY/Ea,qBAAqBC,GACxB,MAAM,IAAI5B,eAAe6B,eACrB7B,eAAe8B,UAAUC,cACzB,4EAODC,UACH,OAAOpC,EAAgBqC,cAQpBC,2BAGH,MAAO,CAACtC,EAAgBmB,WAQrBoB,UACH,MAAO,GAQJC,MAAMC,GACTtC,KAAKD,MAAM,sBAAuBE,eAAesC,iBAAiBD,IAS/DE,GAAGC,EAA0BC,GAChC1C,KAAK2C,cAAcC,SAASH,EAAOC,GAShCG,KAAKJ,EAA0BC,GAClC,MAAMI,EAA8CC,IAChD,IACIL,EAAQK,GACV,MAAOC,GAGL,MADAhD,KAAKiD,IAAIF,EAAGhC,KAAM+B,GACZE,EAEVhD,KAAKiD,IAAIF,EAAGhC,KAAM+B,IAEtB9C,KAAK2C,cAAcC,SAASH,EAAOK,GAWhCG,IAAIR,EAA2BC,QACpBpC,IAAVmC,EACAzC,KAAK2C,cAAcO,gBAEnBlD,KAAK2C,cAAcQ,WAAWV,EAAOC,GAOrClB,KAAKiB,GACTzC,KAAKD,MAAM,aAAc0C,EAAM1B,MAC/B,MAAMqC,EAAWpD,KAAK2C,cAAcU,IAAIZ,EAAM1B,MAC9C,IAAK,MAAM2B,KAAWU,EAClB,IACIpD,KAAKsD,YAAYZ,EAASD,GAC5B,MAAOO,GACLrC,QAAQgB,MAAM3B,KAAKI,OAAQ,yBAA0BqC,EAAM1B,KAAM,WAAYiC,IAUjFM,YAAYZ,EAAwCD,IAEvC,IADAC,EAAQD,IAErBzC,KAAK2C,cAAcQ,WAAWV,EAAM1B,KAAM2B,GAO1CnB,aAAaD,GACjB,YAA6ChB,IAAzCgB,EAAQzB,EAAgB6B,eACxBf,QAAQ4C,KAAKvD,KAAKI,OAAQ,0CACnB,WApOAP,gBAAgB,qCAChBA,YAAY,OACZA,cAAc,IACdA,aAAa"}