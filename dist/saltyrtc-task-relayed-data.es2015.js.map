{"version":3,"file":"saltyrtc-task-relayed-data.es2015.js","sources":["../src/task.ts"],"sourcesContent":["/**\n * Copyright (C) 2018-2022 Threema GmbH\n *\n * This software may be modified and distributed under the terms\n * of the MIT license.  See the `LICENSE.md` file for details.\n */\n\n/// <reference types=\"@saltyrtc/client\" />\n\n/**\n * Relayed Data Task.\n */\nexport class RelayedDataTask implements saltyrtc.tasks.relayed_data.RelayedDataTask {\n\n    // Constants\n    private static PROTOCOL_NAME = 'v0.relayed-data.tasks.saltyrtc.org';\n    private static TYPE_DATA = 'data';\n    private static KEY_PAYLOAD = 'p';\n    private static EVENT_DATA = 'data';\n\n    // Debugging enabled?\n    private debugging = false;\n\n    // Initialization state\n    private initialized = false;\n\n    // Signaling\n    private signaling: saltyrtc.Signaling;\n\n    // Events\n    private eventRegistry: saltyrtc.EventRegistry = new saltyrtcClient.EventRegistry();\n\n    // Log tag\n    private get logTag(): string {\n        if (this.signaling === null || this.signaling === undefined) {\n            return '[SaltyRTC.RelayedData]';\n        }\n        return '[SaltyRTC.RelayedData.' + this.signaling.role + ']';\n    }\n\n    /**\n     * Enable or disable debug logs.\n     */\n    public setDebug(enabled: boolean): void {\n        this.debugging = enabled;\n    }\n\n    /**\n     * Log to console.debug if debug mode is enabled.\n     */\n    private debug(...args: any[]) {\n        if (this.debugging) {\n            // tslint:disable:no-console\n            console.debug(this.logTag, ...args);\n        }\n    }\n\n    /**\n     * Create a new task instance.\n     */\n    constructor(debug: boolean = false) {\n        this.debugging = debug;\n    }\n\n    /**\n     * Send an end-to-end encrypted message through the WebSocket.\n     */\n    public sendMessage(data: any): void {\n        this.signaling.sendTaskMessage({\n            type: RelayedDataTask.TYPE_DATA,\n            p: data,\n        });\n    }\n\n    /**\n     * Initialize the task with the task data from the peer.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public init(signaling: saltyrtc.Signaling, data: object): void {\n        this.debug('init');\n        this.signaling = signaling;\n        this.initialized = true;\n    }\n\n    /**\n     * Used by the signaling class to notify task that the peer handshake is over.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public onPeerHandshakeDone(): void {\n        this.debug('onPeerHandshakeDone');\n    }\n\n    /**\n     * Handle incoming task messages.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public onTaskMessage(message: saltyrtc.messages.TaskMessage): void {\n        this.debug('New task message arrived: ' + message.type);\n        switch (message.type) {\n            case RelayedDataTask.TYPE_DATA:\n                if (this.validateData(message) !== true) {\n                    return;\n                }\n                this.emit({type: RelayedDataTask.EVENT_DATA, data: message[RelayedDataTask.KEY_PAYLOAD]});\n                break;\n            default:\n                console.error(this.logTag, 'Received message with invalid type:', message.type);\n        }\n    }\n\n    /**\n     * Send a signaling message *through the data channel*.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     *\n     * @param payload Non-encrypted message\n     * @throws SignalingError always\n     */\n    public sendSignalingMessage(payload: Uint8Array) {\n        throw new saltyrtcClient.SignalingError(\n            saltyrtcClient.CloseCode.ProtocolError,\n            'sendSignalingMessage called even though task does not implement handover',\n        );\n    }\n\n    /**\n     * Return the task protocol name.\n     */\n    public getName(): string {\n        return RelayedDataTask.PROTOCOL_NAME;\n    }\n\n    /**\n     * Return the list of supported message types.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public getSupportedMessageTypes(): string[] {\n        // Only return data message. The 'close' and 'application' messages are already handled\n        // by the `@saltyrtc/client` library.\n        return [RelayedDataTask.TYPE_DATA];\n    }\n\n    /**\n     * Return the task data used for negotiation in the `auth` message.\n     *\n     * This method should only be called by the signaling class, not by the end user!\n     */\n    public getData(): object {\n        return {};\n    }\n\n    /**\n     * This method can be called by the user to close the connection.\n     *\n     * @param reason The close code.\n     */\n    public close(reason: number): void {\n        this.debug('Closing connection:', saltyrtcClient.explainCloseCode(reason));\n    }\n\n    /**\n     * Attach an event handler to the specified event(s).\n     *\n     * Note: The same event handler object cannot be registered multiple\n     * times. It will only run once.\n     */\n    public on(event: string | string[], handler: saltyrtc.SaltyRTCEventHandler): void {\n        this.eventRegistry.register(event, handler);\n    }\n\n    /**\n     * Attach a one-time event handler to the specified event(s).\n     *\n     * Note: If the same handler was already registered previously as a regular\n     * event handler, it will be completely removed after running once.\n     */\n    public once(event: string | string[], handler: saltyrtc.SaltyRTCEventHandler): void {\n        const onceHandler: saltyrtc.SaltyRTCEventHandler = (ev: saltyrtc.SaltyRTCEvent) => {\n            try {\n                handler(ev);\n            } catch (e) {\n                // Handle exceptions\n                this.off(ev.type, onceHandler);\n                throw e;\n            }\n            this.off(ev.type, onceHandler);\n        };\n        this.eventRegistry.register(event, onceHandler);\n    }\n\n    /**\n     * Remove an event handler from the specified event(s).\n     *\n     * If no handler is specified, remove all handlers for the specified\n     * event(s).\n     *\n     * If no event name is specified, all event handlers will be cleared.\n     */\n    public off(event?: string | string[], handler?: saltyrtc.SaltyRTCEventHandler): void {\n        if (event === undefined) {\n            this.eventRegistry.unregisterAll();\n        } else {\n            this.eventRegistry.unregister(event, handler);\n        }\n    }\n\n    /**\n     * Emit an event.\n     */\n    private emit(event: saltyrtc.SaltyRTCEvent) {\n        this.debug('New event:', event.type);\n        const handlers = this.eventRegistry.get(event.type);\n        for (const handler of handlers) {\n            try {\n                this.callHandler(handler, event);\n            } catch (e) {\n                console.error(this.logTag, 'Unhandled exception in', event.type, 'handler:', e);\n            }\n        }\n    }\n\n    /**\n     * Call a handler with the specified event.\n     *\n     * If the handler returns `false`, unregister it.\n     */\n    private callHandler(handler: saltyrtc.SaltyRTCEventHandler, event: saltyrtc.SaltyRTCEvent) {\n        const response = handler(event);\n        if (response === false) {\n            this.eventRegistry.unregister(event.type, handler);\n        }\n    }\n\n    /**\n     * Validate data messages.\n     */\n    private validateData(message: saltyrtc.messages.TaskMessage): boolean {\n        if (message[RelayedDataTask.KEY_PAYLOAD] === undefined) {\n            console.warn(this.logTag, 'Data message does not contain payload');\n            return false;\n        }\n        return true;\n    }\n\n}\n"],"names":[],"mappings":"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"}