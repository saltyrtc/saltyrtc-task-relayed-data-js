/**
 * saltyrtc-task-relayed-data v0.4.0
 * A SaltyRTC Relayed Data task implementation.
 * https://github.com/saltyrtc/saltyrtc-task-relayed-data-js#readme
 *
 * Copyright (C) 2018-2022 Threema GmbH
 *
 * This software may be modified and distributed under the terms
 * of the MIT license:
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
"use strict";var saltyrtcTaskRelayedData=function(e){class t{constructor(e=!1){this.debugging=!1,this.initialized=!1,this.eventRegistry=new saltyrtcClient.EventRegistry,this.debugging=e}get logTag(){return null===this.signaling||void 0===this.signaling?"[SaltyRTC.RelayedData]":"[SaltyRTC.RelayedData."+this.signaling.role+"]"}setDebug(e){this.debugging=e}debug(...e){this.debugging&&console.debug(this.logTag,...e)}sendMessage(e){this.signaling.sendTaskMessage({type:t.TYPE_DATA,p:e})}init(e,t){this.debug("init"),this.signaling=e,this.initialized=!0}onPeerHandshakeDone(){this.debug("onPeerHandshakeDone")}onTaskMessage(e){if(this.debug("New task message arrived: "+e.type),e.type===t.TYPE_DATA){if(!0!==this.validateData(e))return;this.emit({type:t.EVENT_DATA,data:e[t.KEY_PAYLOAD]})}else console.error(this.logTag,"Received message with invalid type:",e.type)}sendSignalingMessage(e){throw new saltyrtcClient.SignalingError(saltyrtcClient.CloseCode.ProtocolError,"sendSignalingMessage called even though task does not implement handover")}getName(){return t.PROTOCOL_NAME}getSupportedMessageTypes(){return[t.TYPE_DATA]}getData(){return{}}close(e){this.debug("Closing connection:",saltyrtcClient.explainCloseCode(e))}on(e,t){this.eventRegistry.register(e,t)}once(e,t){const s=e=>{try{t(e)}catch(t){throw this.off(e.type,s),t}this.off(e.type,s)};this.eventRegistry.register(e,s)}off(e,t){void 0===e?this.eventRegistry.unregisterAll():this.eventRegistry.unregister(e,t)}emit(e){this.debug("New event:",e.type);const t=this.eventRegistry.get(e.type);for(const s of t)try{this.callHandler(s,e)}catch(t){console.error(this.logTag,"Unhandled exception in",e.type,"handler:",t)}}callHandler(e,t){!1===e(t)&&this.eventRegistry.unregister(t.type,e)}validateData(e){return void 0!==e[t.KEY_PAYLOAD]||(console.warn(this.logTag,"Data message does not contain payload"),!1)}}return t.PROTOCOL_NAME="v0.relayed-data.tasks.saltyrtc.org",t.TYPE_DATA="data",t.KEY_PAYLOAD="p",t.EVENT_DATA="data",e.RelayedDataTask=t,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=saltyrtc-task-relayed-data.es5.min.js.map
